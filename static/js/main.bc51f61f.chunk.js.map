{"version":3,"sources":["img/cyborg-25.png","SnakeDot.js","Food.js","State.js","QTable.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SnakeDot","props","snakeDots","map","dot","i","style","left","top","className","key","Food","food","dir_map","State","Col","curState","argMax","array","x","reduce","r","a","dir_c","best_moves","QTable","arr","row","v","Row","val","col","c","found","genCoords","Math","floor","random","delay","ms","Promise","res","setTimeout","manhattanDist","p1","p2","abs","createQTable","oth","j","push","createVisited","Q_table","visited","dirs","startState","dots","direction","speed","score","justAte","max_score","ep","start_epsilon","end_epsilon","epsilon","episodes","discount_factor","agent_state","checkBounds","head","Board","state","onKeyDown","e","window","event","setDir","parseInt","keyCode","gameOver","moveSnake","newx","length","newy","foodFound","valid","forEach","checkBorders","checkCollapsed","shift","setState","lost","action","eps","dir","v1","mx","ind","qlearning","mxs","cur_epsilon","dec","done","getState","surr","steps","dist","next_surr","next_dir","next_v1","reward","console","log","relx","rely","index","changeSpeed","target","value","preventDefault","handleSubmit","parseFloat","testAgent","setTestAgentState","this","md","lg","sm","xs","Card","Body","Title","Text","Form","onSubmit","Group","Label","Control","name","type","placeholder","min","max","step","required","as","display","justifyContent","Button","variant","onClick","onChange","toFixed","Component","App","Container","fluid","src","Logo","width","alt","rel","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc51f61f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cyborg-25.e53d843b.png\";","import React from 'react';\n\nconst SnakeDot = (props) => {\n    return (\n        <div>\n            {\n                props.snakeDots.map((dot, i) => {\n                    const style = {\n                        left: `${dot[0]}%`,\n                        top: `${dot[1]}%`,\n                    }\n                    return (                    \n                        <div className='board-dot' key={i} style={style}></div>                            \n                    )\n                })                            \n            }            \n        </div>\n    )\n}\n\nexport default SnakeDot;","import React from 'react';\n\nconst Food = (props) => {\n    const style = {\n        left: `${props.food[0]}%`,\n        top: `${props.food[1]}%`\n    }\n\n    return (\n        <div className='food-dot' style={style}></div>\n    )\n}\nexport default Food;","import React from 'react';\nimport './State.css'\nimport { Col } from 'react-bootstrap';\n\nconst dir_map = [\n    ['66.66%', '0%'],\n    ['33.33%', '0%'], \n    ['0%', '0%'],\n    ['0%', '33.33%'],\n    ['0%', '66.66%'],\n    ['33.33%', '66.66%'],\n    ['66.66%', '66.66%'],\n    ['66.66%', '33.33%'],\n];\n\n\nconst State = (props) => {\n    return (\n        <>\n        <Col>\n            <div className='state-dir-area'>\n                {\n                    <>\n                    <div className='state-dot' key={3} style={{'left': '33.33%', 'top': '33.33%', 'background-color': 'gray'}}></div>                 \n                    <div className='state-dot' key={4} style={{'left': '33.33%', 'top': '66.66%', 'background-color': 'gray'}}></div>                 \n                    </>\n                }\n                {\n                    props.curState[0][0] === 1\n                    ?\n                        <div className='state-dot' key={0} style={{'left': '0%', 'top': '33.33%'}}></div>                 \n                    :\n                    null\n                }\n                {\n                    props.curState[0][1] === 1\n                    ?\n                        <div className='state-dot' key={1} style={{'left': '33.33%', 'top': '0%'}}></div>                 \n                    :\n                    null    \n                }\n                {\n                    props.curState[0][2] === 1\n                    ?\n                        <div className='state-dot' key={2} style={{'left': '66.66%', 'top': '33.33%'}}></div>                 \n                    :\n                    null    \n                }\n                {\n                    props.curState[0][3] === 1\n                    ?\n                        <div className='state-dot' key={3} style={{'left': '33.33%', 'top': '66.66%'}}></div>                 \n                    :\n                    null    \n                }                        \n            </div>\n        </Col>\n        <Col>\n            <div className='state-apple-area'>\n                {\n                    <>\n                    <div className='state-dot' key={5} style={{'left': '33.33%', 'top': '33.33%', 'background-color': 'gray'}}></div>                 \n                    <div className='state-dot' key={6} style={{'left': '33.33%', 'top': '66.66%', 'background-color': 'gray'}}></div>                 \n                    </>\n                }\n                {\n                    <div className='state-dot' key={7} style={{'left': dir_map[props.curState[1]][0], 'top': dir_map[props.curState[1]][1], 'background-color': 'black'}}></div>\n                }\n            </div>\n        </Col>\n        </>\n    );\n} \n\nexport default State;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './QTable.css';\nimport {Row} from 'react-bootstrap';\n\nfunction argMax(array) {\n    return array.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n}\n\nconst dir_c = ['L', 'U', 'R', 'D'];\n\n// 4 - impossible states\nconst best_moves = [\n    [2, 1, 2, 3, 1, 1, 0, 3, 2, 2, 2, 2, 1, 1, 0, 4],\n    [1, 1, 2, 3, 1, 1, 0, 3, 1, 1, 2, 2, 1, 1, 0, 4],\n    [1, 1, 2, 3, 0, 1, 0, 3, 1, 1, 0, 2, 1, 1, 0, 4],\n    [0, 3, 0, 3, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4],\n    [3, 3, 3, 3, 0, 3, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4],\n    [3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0, 2, 0, 1, 0, 4],\n    [3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 0, 1, 0, 4],\n    [2, 2, 2, 2, 3, 3, 0, 3, 2, 2, 2, 2, 0, 1, 0, 4]\n];\n\nconst QTable = (props) => {\n    return (\n        <>\n        <div style={{'margin-top': '30px', 'margin-bottom': '30px'}}>\n        {\n            \n                props.curState.map((arr, row) => {\n                    var v = arr.map(argMax)\n                    return (\n                        <Row>    \n                        {      \n                            v.map((val, col) => {\n                                var c = col\n                                return (\n                                    \n                                    props.found[row][c] === false\n                                    ?                                \n                                        <div className='square' style={{'background-color': 'white', 'text-align':'center'}}></div>\n                                    :        \n                                        val === best_moves[row][c]\n                                        ?\n                                            <div className='square' style={{'background-color': '#18ff85', 'text-align':'center'}}>{dir_c[val]}</div>\n                                        :\n                                            <div className='square' style={{'background-color': '#ea3c53', 'text-align':'center'}}>{dir_c[val]}</div>\n                                )\n                            })\n                        }\n                        </Row>\n                    )    \n                }) \n            \n        }\n        </div>\n        </>\n        \n    )\n}\n\nexport default QTable;","import React, {Component} from 'react';\nimport SnakeDot from './SnakeDot.js';\nimport Food from './Food.js';\nimport State from './State.js';\nimport QTable from './QTable.js';\nimport { Form, Row, Col, Button, Card } from 'react-bootstrap';\n\nconst genCoords = () => {\n    return [Math.floor(Math.random() * 20) * 5, Math.floor(Math.random() * 20) * 5];\n}\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst manhattanDist = (p1, p2) => {\n    return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\nconst createQTable = () => {\n    var arr = [];\n    for(var i = 0; i < 8; i++) {\n        var oth = [];\n        for(var j = 0; j < 16; j++) {\n            oth.push([0, 0, 0, 0]);\n        }\n        arr.push(oth);\n    }\n    return arr;\n}\n\nconst createVisited = () => {\n    var arr = [];\n    for(var i = 0; i < 8; i++) {\n        var oth = [];\n        for(var j = 0; j < 16; j++) {\n            oth.push(false);\n        }\n        arr.push(oth);\n    }\n    return arr;\n}\n\nvar Q_table = createQTable();\nvar visited = createVisited();\n\nconst dirs = [[-5, 0], [0, -5], [5, 0], [0, 5]];\n\nconst startState = {\n\n    // Environment params:\n    dots: [\n        genCoords()\n    ],\n    food: genCoords(),\n    direction: 2,\n    speed: 100,\n    score: 0,\n    justAte: false,\n    max_score: 0,\n    \n    // Q learning hyperparams:\n    ep: 0,\n    start_epsilon: 0.9,\n    end_epsilon: 0,\n    epsilon: 0.9,\n    episodes: 100,\n    discount_factor: 1.0,\n    agent_state: 2 // 0 train, 1 test, 2 idle\n}\n\nconst checkBounds = (head) => {\n    return (head[0] < 0) || (head[0] > 95) || (head[1] < 0) || (head[1] > 95);\n}\n\n\nclass Board extends Component {\n    \n    state = startState\n    \n    componentDidMount () {\n        //this.qlearning();\n        //setInterval(this.moveSnake, this.state.speed);\n        //document.onkeydown = this.onKeyDown;\n    }\n\n    setDir (val) {\n        if(this.state.dots.length === 2 && Math.abs(this.state.direction - (val - 37)) === 2) {\n            this.setState({direction: val - 37});            \n            return true;\n        }\n        else if(val >= 37 && val <= 40) {\n            this.setState({direction: val - 37});\n            return false;\n        }\n    }\n\n    onKeyDown = (e) => {\n        e = e || window.event();\n        // length 2 opposite direction exception \n        if(this.setDir(parseInt(e.keyCode))) {\n            this.gameOver();\n        }\n    }\n\n    moveSnake = () => {\n        var state = this.state;\n        var newx = state.dots[state.dots.length - 1][0];\n        var newy = state.dots[state.dots.length - 1][1];\n        var foodFound = false;\n        var valid = true;\n        \n        newx += dirs[state.direction][0];\n        newy += dirs[state.direction][1];    \n\n        if(newx === state.food[0] && newy === state.food[1]) {\n            while(true) {\n                valid = true;\n                state.food = genCoords();\n                // eslint-disable-next-line no-loop-func\n                state.dots.forEach((dot, i) => {\n                    if(dot[0] === state.food[0] && dot[1] === state.food[1]) {\n                        valid = false;\n                    }\n                })\n                if(valid) break;\n            }\n            state.score++;\n            //if(state.speed > 20) state.speed -= 10;\n            foodFound = true;\n        }\n        state.justAte = foodFound;\n        state.dots.push([newx, newy]);\n        if(this.checkBorders() || this.checkCollapsed()) {\n            this.gameOver();\n            return true;\n        }\n        else {\n            if(!foodFound)\n                state.dots.shift();\n            this.setState(state);\n            return false;\n        }\n    }\n\n    checkBorders = () => {\n        var head = this.state.dots[this.state.dots.length - 1];\n        if(checkBounds(head)) {\n            return true;\n        }\n        return false;\n    }\n\n    checkCollapsed = () => {\n        var lost = false;\n        var head = this.state.dots[this.state.dots.length - 1];\n        this.state.dots.forEach((dot, i) => {\n            if(i !== 0 && i !== this.state.dots.length - 1 && head[0] === dot[0] && head[1] === dot[1]) {\n                lost = true;\n            }\n        })\n        return lost;\n    }\n\n    gameOver = () => {\n        this.setState({\n            ...this.state,\n            dots: [\n                genCoords()\n            ],\n            food: genCoords(),\n            direction: 2,\n            score: 0,\n            justAte: false,\n        });\n    }\n\n    action = (eps, dir, v1) => {\n        if(Math.random() < eps) {\n            return Math.floor(Math.random() * 4);\n        }\n        else {\n            var mx = -100000, ind = 0;\n            for(var i = 0; i < 4; i++) {\n                if(Q_table[dir][v1][i] > mx) {\n                    mx = Q_table[dir][v1][i];\n                    ind = i;\n                }\n            }\n            return parseInt(ind);\n        }\n    }\n\n    qlearning = async () => {\n        Q_table = createQTable();\n        visited = createVisited();\n        var mx, mxs = 0, done, reward;\n        var next_surr, next_dir, next_v1;\n        var surr, dir, v1, dist, action, steps;\n        var cur_epsilon = this.state.start_epsilon;\n        var dec = (this.state.start_epsilon - this.state.end_epsilon) / this.state.episodes;\n        \n        for(var ep = 0; ep < this.state.episodes; ep++) {\n            done = false;\n            [surr, dir] = this.getState();\n            v1 = surr[0] + (2 * surr[1]) + (4 * surr[2]) + (8 * surr[3]);\n            steps = 0;\n\n            while(!done) {\n                dist = manhattanDist(this.state.food, this.state.dots[this.state.dots.length - 1]);\n\n                // step\n                action = this.action(cur_epsilon, dir, v1);\n                visited[dir][v1] = true;\n\n                // moving and checking the length 2 edge case:\n                if(this.setDir(action + 37)) done = true;\n                else await delay(this.state.speed);\n                \n                done = done || (steps >= 500) || this.moveSnake();\n                if(!done) {\n                    [next_surr, next_dir] = this.getState();\n                    next_v1 = next_surr[0] + (2 * next_surr[1]) + (4 * next_surr[2]) + (8 * next_surr[3]);\n                }\n\n                // reward\n                if(done) \n                    reward = -100;\n                else if(this.state.justAte) \n                    reward = 30;\n                else if(manhattanDist(this.state.food, this.state.dots[this.state.dots.length - 1]) < dist) \n                    reward = 1;\n                else \n                    reward = -5;  \n\n                if(!done) {\n                    mx = -100000;\n                    for(var i = 0; i < 4; i++) {\n                        if(Q_table[next_dir][next_v1][i] >= mx) {\n                            mx = Q_table[next_dir][next_v1][i];\n                        }\n                    }\n                }          \n                else mx = 0;      \n\n                Q_table[dir][v1][action] += 0.01 * ((reward + (this.state.discount_factor * mx)) - Q_table[dir][v1][action])\n                \n                v1 = next_v1;\n                dir = next_dir;\n                if(this.state.justAte)\n                    steps++;\n                else \n                    steps = 0\n\n                if(this.state.agent_state !== 0) \n                    break;\n                if(this.state.score > mxs) \n                    mxs = this.state.score;\n            }\n            this.gameOver();    \n            if((cur_epsilon - dec) >= this.state.end_epsilon) cur_epsilon -= dec;\n            else cur_epsilon = this.state.end_epsilon;\n            \n            //cur_epsilon *= 0.994;\n\n            this.setState({...this.state, max_score: mxs, ep: ep+1, epsilon: cur_epsilon})\n            if(this.state.agent_state !== 0) \n                break;\n        }\n        console.log(Q_table);\n    }\n\n    /*\n        State definition:\n            surr = 4 cells around the head  LURD\n            dir = relative pos of the apple (8 possible vals 0 - 7)\n    */\n    getState = () => {\n        var surr = [0, 0, 0, 0];\n        var dir = 0;\n        var head = this.state.dots[this.state.dots.length - 1]\n        var relx = head[0] - this.state.food[0];\n        var rely = head[1] - this.state.food[1];\n\n        if(relx < 0 && rely < 0) dir = 6;\n        else if(relx === 0 && rely < 0) dir = 5;\n        else if(relx > 0 && rely < 0) dir = 4;\n        else if(relx > 0 && rely === 0) dir = 3;\n        else if(relx > 0 && rely > 0) dir = 2;\n        else if(relx === 0 && rely > 0) dir = 1;\n        else if(relx < 0 && rely > 0) dir = 0;\n        else if(relx < 0 && rely === 0) dir = 7;\n\n        for(var index = 0; index < 4; index++) {    \n            if(checkBounds([head[0] + dirs[index][0],  head[1] + dirs[index][1]])) {\n                surr[index] = 1;\n            }\n            else {\n                // eslint-disable-next-line no-loop-func\n                this.state.dots.forEach((dot, i) => {\n                    if(i <= this.state.dots.length - 2) {\n                        if((dot[0] === (head[0] + dirs[index][0])) && (dot[1] === (head[1] + dirs[index][1]))) \n                            surr[index] = 1;\n                    }\n                })\n            }\n        }    \n\n        return [surr, dir];\n    }\n\n    changeSpeed = (event) => {\n        this.setState({...this.state, speed: parseInt(event.target.value)});\n        event.preventDefault();\n    }\n\n    handleSubmit = (event) => {\n        this.setState({...this.state,\n                        start_epsilon: parseFloat(event.target[0].value), \n                        discount_factor: parseFloat(event.target[1].value), \n                        end_epsilon: parseFloat(event.target[2].value), \n                        epsilon: parseFloat(event.target[0].value), \n                        agent_state: 0,\n                        episodes: parseInt(event.target[3].value)}, () => {\n                            console.log(this.state);\n                            this.qlearning();\n                        })        \n        event.preventDefault();\n    }\n\n    testAgent = async() => {\n        var done, mxs = 0;\n        var next_surr, next_dir, next_v1;\n        var surr, dir, v1, action, dist, steps;\n        while(this.state.agent_state === 1) {\n            done = false;\n            [surr, dir] = this.getState();\n            v1 = surr[0] + (2 * surr[1]) + (4 * surr[2]) + (8 * surr[3]);\n            steps = 0;\n\n            while(!done) {\n                dist = manhattanDist(this.state.food, this.state.dots[this.state.dots.length - 1]);\n\n                // step\n                action = this.action(0, dir, v1);\n\n                // moving and checking the length 2 edge case:\n                if(this.setDir(action + 37)) done = true;\n                else await delay(this.state.speed);\n                \n                done = done || (steps >= 500) || this.moveSnake();\n                if(!done) {\n                    [next_surr, next_dir] = this.getState();\n                    next_v1 = next_surr[0] + (2 * next_surr[1]) + (4 * next_surr[2]) + (8 * next_surr[3]);\n                }\n                    \n                v1 = next_v1;\n                dir = next_dir;\n                if(this.state.justAte)\n                    steps++;\n                else \n                    steps = 0\n                \n                if(this.state.score > mxs) \n                    mxs = this.state.score;\n\n                if(this.state.agent_state !== 1 || steps > 500) \n                    break;\n            }\n            this.gameOver();               \n            this.setState({...this.state, max_score: mxs}); \n        }\n    }\n    \n    setTestAgentState = () => {\n        if(this.state.agent_state !== 1) {\n            this.setState({...this.state, agent_state: 1}, () => {\n                console.log(\"State updated to test.\");\n                this.testAgent();\n            });\n        }\n    }\n\n    render() {\n        return (\n            <> \n            <Row className=\"justify-content-center align-content-center\" style={{'margin-top': '30px'}}>\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n                    <Card style={{'min-width': '200px'}}>\n                        <Card.Body>\n                            <Card.Title><b>Parameters:</b></Card.Title>\n                            <Card.Text>\n                                <Form onSubmit={this.handleSubmit}>\n                                    <Form.Row>\n                                        <Form.Group style={{'min-width': '255px'}}>\n                                            <Form.Label>Start Epsilon:</Form.Label>\n                                            <Form.Control name=\"start_epsilon\" type=\"number\" placeholder=\"Around 0.99\" min=\"0\" max=\"1\" step=\"0.01\" required/>\n                                        </Form.Group>\n                                    </Form.Row>                                 \n                                    <Form.Row>                                         \n                                        <Form.Group style={{'min-width': '255px'}}>\n                                            <Form.Label>Discount Factor:</Form.Label>\n                                            <Form.Control name=\"discount_factor\" type=\"number\" placeholder=\"1.0 is good for this problem\" min=\"0\" max=\"1\" step=\"0.01\" required/>\n                                        </Form.Group>\n                                    </Form.Row> \n                                \n                                    <Form.Row>\n                                        <Form.Group style={{'min-width': '255px'}}>\n                                            <Form.Label>End Epsilon:</Form.Label>\n                                            <Form.Control name=\"end_epsilon\" type=\"number\" placeholder=\"Usually around 0.\" min=\"0\" max=\"1\" step=\"0.01\" required/>\n                                        </Form.Group>\n                                    </Form.Row> \n                                    <Form.Row>                                 \n                                        <Form.Group style={{'min-width': '255px'}}>\n                                            <Form.Label>Episodes:</Form.Label>\n                                            <Form.Control name=\"episodes\" type=\"number\" placeholder=\"Around 150-200\" min=\"10\" max=\"5000\" required />\n                                        </Form.Group>\n                                    </Form.Row> \n                                    <Form.Row> \n                                        <Form.Group as={Col}>\n                                            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                                                <Button type=\"submit\" variant=\"primary\">Train</Button>\n                                            </div>\n                                        </Form.Group>  \n                                        <Form.Group as={Col}>\n                                            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                                                <Button type=\"button\" variant=\"primary\" onClick={() => {this.setState({...this.state, agent_state: 2})}}>Stop</Button>\n                                            </div>\n                                        </Form.Group>                                             \n                                        <Form.Group as={Col}>\n                                            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                                                <Button variant=\"primary\" onClick={this.setTestAgentState}>Test</Button>\n                                            </div>                                        \n                                        </Form.Group>                                                                        \n                                    </Form.Row> \n                                </Form>         \n                                <Row className=\"justify-content-center\">\n                                    <small>{\"Note: Train button resets Q-table\"}</small>\n                                </Row>        \n                            </Card.Text>\n                        </Card.Body>                    \n                    </Card>   \n                </Col>\n\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n                    <Card className='bg-light' style={{'min-width': '288px'}}>\n                        <Card.Body>\n                            <Card.Title><b>Speed Control:</b></Card.Title>\n                            <Card.Text>\n                                <Form>\n                                    <Form.Group style={{'text-align': 'center'}}>\n                                        <Form.Label>Delay between moves: </Form.Label>\n                                        <Form.Control type=\"range\" min=\"10\" max = \"200\" step=\"5\" onChange = {(e) => this.changeSpeed(e)}/>\n                                    </Form.Group>\n                                </Form>    \n                            </Card.Text>\n                            <Card.Title><b>Current Run:</b></Card.Title>\n                            <Card.Text>\n                                <Row className='justify-content-center'>\n                                    <Col style={{'margin-left': '20px', 'text-align': 'left', 'font-size': '15px'}}>\n                                        Episodes: <br />\n                                        Start Epsilon: <br />\n                                        End Epsilon: <br />\n                                        Current Epsilon: <br />\n                                        Discount Factor: <br />\n                                        Current Score: <br />\n                                        Max Score: <br />\n                                    </Col>\n                                    <Col style={{'font-size': '15px', 'max-width': '110px'}}>\n                                        {this.state.ep} / {this.state.episodes} <br />\n                                        {this.state.start_epsilon} <br />\n                                        {this.state.end_epsilon} <br />\n                                        {parseFloat(this.state.epsilon).toFixed(3)} <br />\n                                        {this.state.discount_factor} <br />\n                                        {this.state.score} <br />\n                                        {this.state.max_score} <br />\n                                    </Col>\n                                </Row>\n                            </Card.Text>\n                            <Card.Title>\n                                <b>What does the <br />agent see?</b>\n                            </Card.Title>\n                            <Card.Text>\n                                <Row>\n                                    <Col style={{'width': '40px', 'margin-left': '20px'}}>\n                                        Click the two boxes present below for the exact details of the state representation.\n                                    </Col>\n                                </Row>\n                            </Card.Text>\n                        </Card.Body>                    \n                    </Card>   \n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-center\">\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n                    <div className='board-area'>\n                        <SnakeDot snakeDots={this.state.dots}/>\n                        <Food food={this.state.food} />\n                    </div>\n                </Col>\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n                    <State curState={this.getState()} />\n                </Col>    \n            </Row>\n            <Row className=\"justify-content-center\">\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n                    <QTable curState={Q_table} found={visited}/>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n                <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\" style={{'margin-bottom': '50px'}}>\n                    <Card style={{'width': '610px'}}>\n                        <Card.Title style={{'margin-top': '20px', 'margin-bottom': '-5px'}}><b>The Q-Table:</b></Card.Title>\n                        <Card.Body>\n                        <ul>\n                            <li>The Q-table shown above has dimensions <b>8 x 16</b> (with 4 entries in each cell for each move, here we just show the best move learnt so far).</li>\n                            <li>Each cell in the grid is a <b>state</b>, ie: one situation the snake finds itself in, like the apple is in the top left direction and there is danger to left, which move do I make - up, left, down, or right?</li>\n                            <li>The blank entries correspond to unexplored states. So initially, all states are unexplored. As the AI plays the game, it explores the different states and tries to learn what moves work (based on the reward for each action made).</li>                            \n                            <li>The <sp style={{'color': 'red'}}>red</sp> entries correspond to explored states with wrong move learnt by the AI.</li>\n                            <li>The <sp style={{'color': 'green'}}>green</sp> entries correspond to explored states with right move learnt by the AI (ie: what move a human would make).</li>\n                            <li>The 8 rows correspond to: Relative location of the apple to the head (8 directions)</li>\n                            <li>The 16 columns correspond to: Presence of danger one step ahead of the head in 4 directions (array of 4 numbers, which results in 16 possible values).</li>\n                        </ul>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>            \n            </>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board.js'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Card, Container, Row, Col} from 'react-bootstrap';\nimport Logo from './img/cyborg-25.png';\n\nfunction App() {\n  return (\n    <Container fluid className=\"wrapper\">\n      \n      <Row className=\"justify-content-center align-items-center\">\n        \n        <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n          <img src={Logo} width='300' alt='Q-Snake Logo'></img>\n        </Col>\n        <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n          <h1 style={{'font-family': 'FacileSans', 'font-size': 60, 'color': 'white'}}>Q-Snake</h1>\n        </Col>        \n\n      </Row>\n\n      <Row className=\"justify-content-center align-content-center\">\n        <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n          <Card className='bg-light' style={{'max-width': '18em', 'min-width': '200px', 'background-color': '#fafafa'}}>\n            <Card.Body>\n              <Card.Title><b>What is this?</b></Card.Title>  \n              <Card.Text>\n                • An interactive web visualiser for a Q-learning RL agent that plays Snake. \n                <br></br>\n                • Set your own hyperparameters and see how the algorithm performs.\n                <br></br>\n                • Uses <a target='_blank' rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Q-learning\">tabular Q-learning</a>.\n              </Card.Text>        \n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col md=\"auto\" lg=\"auto\" sm=\"auto\" xs=\"auto\">\n          <Card className='bg-light' style={{'max-width': '18em', 'min-width': '200px', 'background-color': '#fafafa'}}>\n            <Card.Body>\n              <Card.Title><b>How do I use this?</b></Card.Title> \n              <Card.Text>\n                • Just set the parameters below and hit <b>Train</b>.\n                <br></br>\n                • Vary the speed and click <b>Test</b> to see how the AI plays after training.\n                <br></br>\n                • Explanation of each parameter and the code for this project is available on <a target='_blank' rel=\"noopener noreferrer\" href='https://www.github.com/sid-sr/q-snake'>GitHub</a>.\n              </Card.Text>         \n            </Card.Body>\n          </Card>\n        </Col>    \n\n      </Row>\n\n      <Board />\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}